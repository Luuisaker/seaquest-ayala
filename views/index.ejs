<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <title>SeaQuest</title>
    <style>
        body {
            margin: 0;
            background: #001a33;
            color: #fff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
        }
        #gameContainer {
            margin: 0 auto;
            display: block;
            width: 800px;
            height: 600px;
            border: 4px solid #00cfff;
            box-shadow: 0 0 20px #00cfff;
        }
        #info {
            text-align: center;
            margin-top: 10px;
            font-size: 18px;
            user-select: none;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
</head>
<body>
    <div id="gameContainer"></div>
    <div id="info">Usa las flechas para mover el submarino. Recoge oxígeno y evita enemigos. Sobrevive el mayor tiempo posible.</div>

<script>
class SeaQuestScene extends Phaser.Scene {
    constructor() {
        super({ key: 'SeaQuestScene' });
    }

    preload() {
        // Carga de assets locales (asegúrate de que existan en carpeta assets)
        this.load.image('background', 'assets/background.png');
        this.load.image('submarine', 'assets/player.png');
        this.load.image('enemy', 'assets/enemies.png');
        this.load.image('oxygen', 'assets/oxigen.png');
        
    }

    create() {
        this.lives = 3;
        this.oxygenMax = 15;
        this.oxygen = this.oxygenMax;
        this.isGameOver = false;

        this.currentLifeSeconds = 0;
        this.totalPoints = 0;

        
        this.bg = this.add.tileSprite(400, 300, 800, 600, 'background');

        
        this.submarine = this.physics.add.sprite(400, 300, 'submarine');
        this.submarine.setCollideWorldBounds(true);
        this.submarine.setScale(0.5);
        this.submarine.setOrigin(0.5, 0.5);
        this.submarine.setDepth(1);

        
        this.enemies = this.physics.add.group();
        this.oxygenItems = this.physics.add.group();
        this.bullets = this.physics.add.group();

        
        this.cursors = this.input.keyboard.createCursorKeys();
        this.shootKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);

        
        this.physics.add.collider(this.submarine, this.enemies, this.hitEnemy, null, this);
        this.physics.add.overlap(this.submarine, this.oxygenItems, this.collectOxygen, null, this);
        this.physics.add.overlap(this.bullets, this.enemies, this.bulletHitsEnemy, null, this);

        this.scoreText = this.add.text(10, 10, 'Puntos: 0', { fontSize: '20px', fill: '#00ffff' });
        this.livesText = this.add.text(700, 10, 'Vidas: 3', { fontSize: '20px', fill: '#00ffff' });
        this.oxygenText = this.add.text(350, 10, 'Oxígeno: 15', { fontSize: '20px', fill: '#00ffff' });

       
        this.gameOverText = this.add.text(400, 300, '¡Juego Terminado!\nPresiona R para reiniciar', {
            fontSize: '40px',
            fill: '#ff4040',
            align: 'center',
            backgroundColor: 'rgba(0,0,0,0.7)',
            padding: { x: 20, y: 20 }
        });
        this.gameOverText.setOrigin(0.5);
        this.gameOverText.visible = false;

        this.restartKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.R);

        
        this.time.addEvent({
            delay: 2000,
            callback: this.spawnEnemy,
            callbackScope: this,
            loop: true
        });

        this.time.addEvent({
            delay: 5000,
            callback: this.spawnOxygen,
            callbackScope: this,
            loop: true
        });

        this.lastBulletTime = 0;
    }

    update(time, delta) {
        if(this.isGameOver) {
            if(this.restartKey.isDown) {
                this.scene.restart();
            }
            return;
        }

       
        if(this.cursors.left.isDown){
            this.bg.tilePositionX -= 2;
        } else if(this.cursors.right.isDown){
            this.bg.tilePositionX += 2;
        }
        if(this.cursors.up.isDown){
            this.bg.tilePositionY -= 2;
        } else if(this.cursors.down.isDown){
            this.bg.tilePositionY += 2;
        }

        
        let speed = 200;
        let body = this.submarine.body;
        body.setVelocity(0);

        if(this.cursors.left.isDown) {
            body.setVelocityX(-speed);
        } else if(this.cursors.right.isDown) {
            body.setVelocityX(speed);
        }
        if(this.cursors.up.isDown) {
            body.setVelocityY(-speed);
        } else if(this.cursors.down.isDown) {
            body.setVelocityY(speed);
        }

       
        if(this.shootKey.isDown && time > this.lastBulletTime + 400) {
            this.fireBullet();
            this.lastBulletTime = time;
        }

        
        this.oxygen -= delta / 1000;
        if(this.oxygen <= 0) {
            this.loseLife();
        }

        this.currentLifeSeconds += delta / 1000;

        
        this.scoreText.setText('Puntos: ' + Math.floor(this.totalPoints + this.currentLifeSeconds));
        this.livesText.setText('Vidas: ' + this.lives);
        this.oxygenText.setText('Oxigeno: ' + Math.max(0, this.oxygen.toFixed(1)));

    

        
        this.enemies.children.iterate(enemy => {
            if(enemy && (enemy.x < -50 || enemy.x > 850)) enemy.destroy();
        });

        
        this.oxygenItems.children.iterate(o2 => {
            if(o2 && o2.y > 650) o2.destroy();
        });
    }

    spawnEnemy() {
        const side = Math.random() < 0.5 ? 'left' : 'right';
        const x = side === 'left' ? -30 : 830;
        const y = Phaser.Math.Between(50, 550);
        const enemy = this.enemies.create(x, y, 'enemy');
        enemy.setOrigin(0.5, 0.5);
        enemy.setScale(0.5);
        enemy.body.allowGravity = false;
        enemy.setCollideWorldBounds(false);
        const velocityX = side === 'left' ? 150 : -150;
        enemy.setVelocity(velocityX, 0);
        enemy.setDepth(1);
    }

    spawnOxygen() {
        const x = Phaser.Math.Between(50, 750);
        const oxygen = this.oxygenItems.create(x, -20, 'oxygen');
        oxygen.setOrigin(0.5, 0.5);
        oxygen.setScale(0.3);
        oxygen.body.allowGravity = false;
        oxygen.setVelocity(0, 100);
        oxygen.setCollideWorldBounds(false);
        oxygen.setDepth(1);
    }

    collectOxygen(submarine, oxygen) {
        oxygen.destroy();
        this.oxygen = this.oxygenMax;
    }



    hitEnemy(submarine, enemy) {
        enemy.destroy();
        this.loseLife();
    }

    loseLife() {
        this.lives -= 1;
        this.currentLifeSeconds = 0;
        this.oxygen = this.oxygenMax;
        this.cameras.main.flash(300, 255, 0, 0);
        if(this.lives <= 0) {
            this.gameOver();
        }
    }

    gameOver() {
        this.isGameOver = true;
        this.submarine.body.setVelocity(0);
        this.enemies.clear(true, true);
        this.oxygenItems.clear(true, true);
        this.bullets.clear(true, true);
        this.gameOverText.visible = true;
    }
}

const config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    backgroundColor: '#001a33',
    parent: 'gameContainer',
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: [SeaQuestScene]
};

const game = new Phaser.Game(config);
</script>
</body>
</html>

